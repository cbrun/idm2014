/**
 */
package org.gemoc.agro.exploitation.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.gemoc.agro.exploitation.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ExploitationFactoryImpl extends EFactoryImpl implements ExploitationFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static ExploitationFactory init() {
		try {
			ExploitationFactory theExploitationFactory = (ExploitationFactory)EPackage.Registry.INSTANCE.getEFactory(ExploitationPackage.eNS_URI);
			if (theExploitationFactory != null) {
				return theExploitationFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new ExploitationFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ExploitationFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case ExploitationPackage.EXPLOITATION: return createExploitation();
			case ExploitationPackage.CLIMATE_DEFINITION: return createClimateDefinition();
			case ExploitationPackage.SURFACE: return createSurface();
			case ExploitationPackage.RESOURCE: return createResource();
			case ExploitationPackage.DAY: return createDay();
			case ExploitationPackage.ACTIVITY_WORK: return createActivityWork();
			case ExploitationPackage.SIMULATION: return createSimulation();
			case ExploitationPackage.CLIMATE: return createClimate();
			case ExploitationPackage.DAILY: return createDaily();
			case ExploitationPackage.EWE: return createEwe();
			case ExploitationPackage.CROP: return createCrop();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Exploitation createExploitation() {
		ExploitationImpl exploitation = new ExploitationImpl();
		return exploitation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ClimateDefinition createClimateDefinition() {
		ClimateDefinitionImpl climateDefinition = new ClimateDefinitionImpl();
		return climateDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Surface createSurface() {
		SurfaceImpl surface = new SurfaceImpl();
		return surface;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Resource createResource() {
		ResourceImpl resource = new ResourceImpl();
		return resource;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Day createDay() {
		DayImpl day = new DayImpl();
		return day;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ActivityWork createActivityWork() {
		ActivityWorkImpl activityWork = new ActivityWorkImpl();
		return activityWork;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Simulation createSimulation() {
		SimulationImpl simulation = new SimulationImpl();
		return simulation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Climate createClimate() {
		ClimateImpl climate = new ClimateImpl();
		return climate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Daily createDaily() {
		DailyImpl daily = new DailyImpl();
		return daily;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Ewe createEwe() {
		EweImpl ewe = new EweImpl();
		return ewe;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Crop createCrop() {
		CropImpl crop = new CropImpl();
		return crop;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ExploitationPackage getExploitationPackage() {
		return (ExploitationPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static ExploitationPackage getPackage() {
		return ExploitationPackage.eINSTANCE;
	}

} //ExploitationFactoryImpl
